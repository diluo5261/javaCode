<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

<!--    指定gproperties文件的位置,从根路径开始找文件-->
    <properties resource="jdbc.properties"/>





    <environments default="mydev">

        <environment id="mydev">

<!--
    transactionManager : mybatis提交事务,回顾事务的方式
     type:事务的处理类型
      1)jdbc:表示mubatis 底层是调用 JDBC 中的Connection 对象的, commit , rollback
      2) MANAGER : 把mybatis 的事务处理委托给其他容器(一个服务器软件,一个框架(spring))
-->
            <transactionManager type="JDBC"/>
<!--
    dataSource : 表示数据源,java体系中,规定实现了 javax.sql.DataSource接口的都是数据源
                数据源表示Connection 对象的

                type : 指定数据源的类型
                1)POOLED :使用连接池，mybatis 会创建 PoolDataSopurces
                2)UPOOLED:不适用连接池,在每次执行sql语句,先创建连接,执行sql,再关闭连接
                3)JNDI :　Java的命名和目录服务(windows注册表)(了解)

-->
            <dataSource type="POOLED">

                <!--数据库的驱动类名-->
                <property name="driver" value="${jdbc.driver}"/>
                <!--连接数据库的url字符串-->
                <property name="url" value="${jdbc.url}"/>
                <!--访问数据库的用户名-->
                <property name="username" value="${jdbc.user}"/>
                <!--密码-->
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>

    </environments>

    <!-- sql mapper(sql映射文件)的位置-->
    <mappers>
<!--        第一种方式-->
        <mapper resource="StudentDao.xml"/>

<!--        第二种方式:使用包名
            name: xml文件 (mapper文件)所在得包名,这个包中所有xml文件一次都能加载给mybatis
            使用package得要求
            1. mapper文件名称需要和接口名称一样,区分大小写
            2.mapper文件和dao接口在同意目录
-->
    </mappers>
</configuration>
