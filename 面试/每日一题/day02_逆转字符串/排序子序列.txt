/*
https://www.nowcoder.com/questionTerminal/2d3f6ddd82da445d804c95db22dcc471?orderByHo

牛牛定义排序子序列为一个数组中一段连续的子序列,并且这段子序列是非递增或者非递减排序的。牛牛有一个长度为n的整数数组A,他现在有一个任务是把数组A分为若干段排序子序列,牛牛想知道他最少可以把这个数组分为几段排序子序列.
  如样例所示,牛牛可以把数组A划分为[1,2,3]和[2,2,1]两个排序子序列,至少需要划分为2个排序子序列,所以输出2

输入描述:
输入的第一行为一个正整数n(1 ≤ n ≤ 10^5)
第二行包括n个整数A_i(1 ≤ A_i ≤ 10^9),表示数组A的每个数字。

输出描述:
输出一个整数表示牛牛可以将A最少划分为多少段排序子序列

题解：
非递减就是a[i]<=a[i+1]，递减就是a[i]>a[i+1]，
非递增就是a[i]>=a[i+1]，递增就是a[i]<a[i+1]

*/

`
import java.util.*;
public class Main{
    public static void main(String[] args){
        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();
        int[] array = new int[n+1];
        
        for(int i =0;i<n;i++){
            array[i]=scan.nextInt();
        }
        
        int i=0;
        int count = 0;
        while(i < n){
            //非递增序列
            if(array[i] > array[i+1]){
                while(i<n && array[i] >= array[i+1]){
                    i++;
                }
                count++;
                i++;
                
            }else if(array[i] < array[i+1]){    
                //非递减子序列
                while(i < n && array[i] <= array[i+1]){
                    i++;
                }
                count++;
                i++;
                
            }else{
                //相等
                i++;
            }
        }
            System.out.println(count);
    }
}

