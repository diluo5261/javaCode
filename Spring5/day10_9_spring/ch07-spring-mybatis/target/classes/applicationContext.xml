<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

    <context:property-placeholder location="classpath:jdbc.properties"/>
<!--    声明数据源 DataSource,作用是连接数据库-->
    <bean id="myDataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="maxActive" value="${jdbc.maxactive}"/>
    </bean>

<!--    声明的是 mybatis 中提供的SqlSessionFactoryBean类,这个类内部创建 SqlSessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
<!--        使用set注入,把数据库连接池赋给dataSource属性-->
        <property name="dataSource" ref="myDataSource"/>
<!--        mybatis 主配置文件位置
            configLocation 属性是Resource类型,读取配置文件
            它的赋值使用value,指定文件路径,使用classPath表示文件位置-->
        <property name="configLocation" value="classpath:mybatis.xml"/>
    </bean>

<!--    创建dao对象,使用sqlSession的getMapper(StudentDao.class)
        MapperScannerConfigurer:在内部调用了getMapper()生成每个dao接口的代理类对象
-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
<!--        指定 SqlSessionFactory对象的 id -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
<!--        指定包名，包名是dao接口所在的包名
            MapperScannerConfigure会扫描这个包中所有的接口，把每个接口都执行
            一次 getMapper（）方法，得到每个接口的 dao 对象
            创建好的dao对象放入到 spring 的容器中。dao 对象的默认名是 接口名的小写-->
        <property name="basePackage" value="com.dilo.dao"/>
    </bean>

<!--    声明service-->
    <bean name="studentService" class="com.dilo.service.impl.StudentServiceImpl">
        <property name="studentDao" ref="studentDao"/>
    </bean>

</beans>