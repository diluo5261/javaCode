<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

<!--    声明注册 springmvc 得 核心对象 DispatcherServlet
        需要在 tomcat 服务器启动后,创建 DispatcherServlet 对象得实例
        为什么要创建 DispatcherServlet 对象得实例呢?
        因为 DispatcherServlet 在他的创建过程中,会同时创建 spring 容器对象
        读取 springmvc 得配置文件,把这个配置文件中的对象都创建等号,当用户发起请求时就可以直接使用对象了

        servlet 的初始化会执行init() 方法,DispatcherServlet 在init()中{
            创建容器对象,读取配置文件
            WebApplicationContext ctx = new ClassPathXmlApplicationContext("spring.xml);
            把容器对象放入到servletContext 中
            getServletContext.serAttribute(key,cts);
        }

        启动 tomcat 报错,读取这个文件 /WEB-INF/spring-servlet.xml
        springmvc 创建容器对象时,读取的配置文件默认是/WEB-INF/<servlet - name>-servlet.xml

-->
    <servlet>
        <servlet-name>spring</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

<!--        自定义 springmvc 读取配置文件的位置-->
        <init-param>
<!--            sringmvc配置文件的位置的属性-->
            <param-name>contextConfigLocation</param-name>
<!--            指定自定义文件的位置-->
            <param-value>classpath:springmvc.xml</param-value>

        </init-param>


<!--       在 tomcat 启动后,创建servlet对象
            load-on-startup : 表示tomcat启动后创建对象的顺序.它的值是整数值,数值越小,tomcat创建对象的时间就越早,大于等于0 的整数
-->
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>spring</servlet-name>
<!--        使用框架的时候，url-pattern 可以使用两种值
               1. 使用扩展名的方式，语法： *.xxx, xxx是自定义的扩展名，常用的有 *.do  *.action  * .mvc等等
               http://localhost:8080:spring/some.do

               2.使用反斜杠 /
-->
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>

<!--    注册声明 过滤器,解决post请求乱码的问题,过滤器中有三个值需要赋值-->
    <filter>
        <filter-name>CharacterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>

<!--        设置项目中使用的字符编码-->
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>

<!--        强制请求(HttpServletRequest)对象使用encoding编码的值-->
        <init-param>
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>

<!--        强制响应(HttpServletResponse)对象是哟i你个encoding编码的值-->
        <init-param>
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>CharacterEncodingFilter</filter-name>
<!--        /* : 表示强制所有的请求先通过过滤器-->
        <url-pattern>/*</url-pattern>
    </filter-mapping>

</web-app>

<!--固定语法规则,没有必要去背-->